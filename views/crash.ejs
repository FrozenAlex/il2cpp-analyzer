<html>
  <head>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins&family=Roboto+Mono&display=swap" rel="stylesheet">
    <style>
      html {
        background-color: #0d1117;
        font-family: 'Poppins', sans-serif;
      }

      body {
        padding: 0;
        margin: 0;
        min-height: 100vh;
      }

      .main {
        display: grid;
        grid-template-rows: 44px 1fr;
        height: 100%;
      }

      .tab {
        overflow: hidden;
      }

      .tab button {
        color: #ffa657;
        background-color: #141b25;
        float: left;
        border: none;
        border-radius: 3px;
        outline: none;
        cursor: pointer;
        padding: 14px 16px;
        transition: 0.3s;
      }

      .tab button:hover {
        background-color: #1f2a3a;
      }

      .tab button.active {
        background-color: #30363d;
      }

      textarea {
        color: #ffa657;
        background-color: #0d1117;
        border-color: #30363d;
        border-radius: 0px;
        white-space: pre;
        overflow: auto;
        width: 100%;
        resize: none;
        font-family: 'Roboto Mono', monospace;
      }

      textarea:focus {
        outline-width: 0;
      }

      textarea::-webkit-scrollbar {
        width: 18px;
      }

      textarea::-webkit-scrollbar-corner {
        background: #161b22;
      }

      textarea::-webkit-scrollbar-track {
        background: #161b22;
      }

      textarea::-webkit-scrollbar-thumb {
        background-color: #30363d;
        border: 3px solid #161b22;
        border-radius: 16px;
      }
      .header {
        display: flex;
        flex-direction: row;
      }

      .info {
        flex: 1;
        text-align: right;
        display: flex;
        color: rgb(137, 206, 206);
        align-items: center;
        justify-content: end;
        margin-right: 10px;
      }
      .info p {
        padding-left: 10px;
        text-align: left;
        font-size: 0.6rem;
      }
      .info p span {
        margin-top: -4px;
        color: #ffa657;
        font-size:1rem;
      }

      .userLink {
        color: #ffa657;
        text-decoration: none;
      }
    </style>
  </head>
  <body>
    <div class="main">
      <div class="header">
        <div class="tab">
          <button
            class="tablinks active"
            id="crash"
            onclick="updateState('crash')"
          >
            Crash
          </button>
          <button class="tablinks" id="log" onclick="updateState('log')">
            Log
          </button>
          <button class="tablinks" id="mods" onclick="updateState('mods')">
            Mods
          </button>
        </div>
        <div class="info">
          <p title="Crash ID">ID: <br><span id="crashId">loading...</span></p>
          <p title="User ID">User:<br><a href="#" class="userLink"><span id="userId">loading...</span></a></p>
          <p title="Upload date">Date: <br><span id="uploadDate">loading...</span></p>
          <p title="Game version">Ver.: <br><span id="gameVersion">loading...</span></p>
        </div>
      </div>

      <textarea id="output" name="output" spellcheck="false" readonly>Loading...</textarea>
    </div>
  </body>
  <script>
    var crashData;
    var selected = "crash";
    const updateState = (id) => {
      if (id) selected = id;
      const tablinks = document.getElementsByClassName("tablinks");
      for (i = 0; i < tablinks.length; i++) {
        tablinks[i].className = tablinks[i].className.replace(" active", "");
      }
      document.getElementById(selected).className += " active";
      if (crashData) {
        switch (selected) {
          case "crash":
            output.value = crashData.stacktrace || "Not Found!";
            break;
          case "log":
            output.value = crashData.log || "Not Found!";
            break;
          case "mods":
            let sortedMods = crashData.mods.sort((a, b) =>
              a.name.localeCompare(b.name)
            );
            output.value =
              sortedMods
                .map((mod) => mod.name + " (v" + mod.version + ")")
                .join("\n") || "Not Found!";
            break;
        }
      } else {
        output.value = "Not Found!";
      }
    };
    fetch("/api/crashes/<%= crashId %>")
      .then((response) => {
        if (response.ok) {
          return response.json();
        }
        throw undefined;
      })
      .then((crash) => {
        crashData = crash;
        updateState();

        // Set info in the header
        let userId = document.getElementById("userId");
        userId.innerHTML = crash.userId || "?";
        // Link to a filter with this user ID
        if (crash.userId) {
          document.querySelector(".userLink").href = "/crashes/?userId=" + crash.userId;
        }
        let crashId = document.getElementById("crashId");
        crashId.innerHTML = crash.crashId || "?";
        let uploadDate = document.getElementById("uploadDate");
        // Format date to be more readable
        if (crash.uploadDate) {
          let date = new Date(crash.uploadDate).toISOString().replace(/T/, ' ').replace(/\..+/, '');
          uploadDate.innerHTML = date;
        } else {
          uploadDate.innerHTML = "?";
        }
        let gameVersion = document.getElementById("gameVersion");
        if (crash.gameVersion) {
          let regex = /(\_\d*)/g;
          // Remove the _ and the number
          crash.gameVersion = crash.gameVersion.replace(regex, "");
        }
        gameVersion.innerHTML = crash.gameVersion || "?";
       

        document.title = "Crash - " + crash.crashId + " - " + crash.userId;
      })
      .catch((err) => {
        crashData = undefined;
        updateState();
      });
  </script>
</html>
